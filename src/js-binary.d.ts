/** Declaration file generated by dts-gen */

export class Data {
    constructor(capacity: any);

    appendBuffer(data: any): void;

    toBuffer(): any;

    writeDouble(value: any): void;

    writeUInt16(value: any): void;

    writeUInt32(value: any): void;

    writeUInt8(value: any): void;

}

export class ReadState {
    constructor(buffer: any);

    hasEnded(): any;

    peekUInt8(): any;

    readBuffer(length: any): any;

    readDouble(): any;

    readUInt16(): any;

    readUInt32(): any;

    readUInt8(): any;

}

export class Type {
    constructor(type: any);

    decode(buffer: any): any;

    encode(value: any): any;

    getHash(): any;

    read(state: any): any;

    write(value: any, data: any, path: any): any;

    static TYPE: {
        ARRAY: string;
        BOOLEAN: string;
        BUFFER: string;
        DATE: string;
        FLOAT: string;
        INT: string;
        JSON: string;
        OBJECT: string;
        OID: string;
        REGEX: string;
        STRING: string;
        UINT: string;
    };

    static types: {
        Buffer: {
            read: any;
            write: any;
        };
        boolean: {
            read: any;
            write: any;
        };
        date: {
            read: any;
            write: any;
        };
        float: {
            read: any;
            write: any;
        };
        int: {
            read: any;
            write: any;
        };
        json: {
            read: any;
            write: any;
        };
        oid: {
            read: any;
            write: any;
        };
        regex: {
            read: any;
            write: any;
        };
        string: {
            read: any;
            write: any;
        };
        uint: {
            read: any;
            write: any;
        };
    };

}

export const types: {
    Buffer: {
        read: any;
        write: any;
    };
    boolean: {
        read: any;
        write: any;
    };
    date: {
        read: any;
        write: any;
    };
    float: {
        read: any;
        write: any;
    };
    int: {
        read: any;
        write: any;
    };
    json: {
        read: any;
        write: any;
    };
    oid: {
        read: any;
        write: any;
    };
    regex: {
        read: any;
        write: any;
    };
    string: {
        read: any;
        write: any;
    };
    uint: {
        read: any;
        write: any;
    };
};

export function Field(name: any, type: any): void;

export namespace Data {
    namespace prototype1 {
        function appendBuffer(data: any): void;

        function toBuffer(): any;

        function writeDouble(value: any): void;

        function writeUInt16(value: any): void;

        function writeUInt32(value: any): void;

        function writeUInt8(value: any): void;

        namespace appendBuffer {
            const prototype: {
            };

        }

        namespace toBuffer {
            const prototype: {
            };

        }

        namespace writeDouble {
            const prototype: {
            };

        }

        namespace writeUInt16 {
            const prototype: {
            };

        }

        namespace writeUInt32 {
            const prototype: {
            };

        }

        namespace writeUInt8 {
            const prototype: {
            };

        }

    }

}

export namespace Field {
    const prototype: {
    };

}

export namespace ReadState {
    namespace prototype2 {
        function hasEnded(): any;

        function peekUInt8(): any;

        function readBuffer(length: any): any;

        function readDouble(): any;

        function readUInt16(): any;

        function readUInt32(): any;

        function readUInt8(): any;

        namespace hasEnded {
            const prototype: {
            };

        }

        namespace peekUInt8 {
            const prototype: {
            };

        }

        namespace readBuffer {
            const prototype: {
            };

        }

        namespace readDouble {
            const prototype: {
            };

        }

        namespace readUInt16 {
            const prototype: {
            };

        }

        namespace readUInt32 {
            const prototype: {
            };

        }

        namespace readUInt8 {
            const prototype: {
            };

        }

    }

}

export namespace Type {
    namespace prototype3 {
        const types: {
            Buffer: {
                read: any;
                write: any;
            };
            boolean: {
                read: any;
                write: any;
            };
            date: {
                read: any;
                write: any;
            };
            float: {
                read: any;
                write: any;
            };
            int: {
                read: any;
                write: any;
            };
            json: {
                read: any;
                write: any;
            };
            oid: {
                read: any;
                write: any;
            };
            regex: {
                read: any;
                write: any;
            };
            string: {
                read: any;
                write: any;
            };
            uint: {
                read: any;
                write: any;
            };
        };

        function decode(buffer: any): any;

        function encode(value: any): any;

        function getHash(): any;

        function read(state: any): any;

        function write(value: any, data: any, path: any): any;

        namespace decode {
            const prototype: {
            };

        }

        namespace encode {
            const prototype: {
            };

        }

        namespace getHash {
            const prototype: {
            };

        }

        namespace read {
            const prototype: {
            };

        }

        namespace write {
            const prototype: {
            };

        }

    }

}

